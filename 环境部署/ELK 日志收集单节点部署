************************** 部署 ELK ****************************************************************
docker pull docker.elastic.co/elasticsearch/elasticsearch:7.13.1
# docker pull docker.elastic.co/logstash/logstash:7.13.1
docker pull docker.elastic.co/kibana/kibana:7.13.1


# 运行单节点   elastic search                      es  kibana  采用docker 部署   logstash 二进制部署的
docker run -d --name es     --net test -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node"   docker.elastic.co/elasticsearch/elasticsearch:7.13.1

# docker run -d --net test -v pipeline/:/usr/share/logstash/pipeline/ -v config/:/usr/share/logstash/config/ docker.elastic.co/logstash/logstash:7.13.1

# 运行 kibana  第一种方式好像无法启动的...
# docker run -d --name kibana --net test -p 5601:5601              -e "I18N_LOCALE=zh-CN" --link=es  docker.elastic.co/kibana/kibana:7.13.1

docker run -d --name kibana --net test -p 5601:5601 -e "I18N_LOCALE=zh-CN" -e "ELASTICSEARCH_HOSTS=http://es:9200" docker.elastic.co/kibana/kibana:7.13.1
# docker run -d --name kibana --net test -p 5601:5601 -e "I18N_LOCALE=zh-CN" -e "ELASTICSEARCH_HOSTS=http://es内网IP:9200" docker.elastic.co/kibana/kibana:7.13.1


#查看健康状态   
green: 集群所有数据处于正常状态
yellow:集群所有数据可以访问，但是有些数据副本还没分配的
red:集群部分数据不可以访问的


#查看 es 启动的状态
http://192.168.13.148:9200/_cat/health

# 安装好kibana后 界面查看
http://192.168.13.148:5601/

----------------------------------------------------------logstash-7.13.1-linux-x86_64.tar.gz ---------------------------------------------------------------
解压logstash

logstash : -e :字符串形式的配置  -f:指定配置文件  -t:测试配置文件语法

./logstash -e "input {stdin {}} output {stdout{}}"

启动时应注意：-e 参数后要使用双引号。在命令行中看到 Successfully started Logstash API endpoint {:port=>9600} 即代表启动成功。

在默认情况下，stdout输出插件的编解码器为 rubydebug ，所以输出内容包括了版本、时间等信息，其中message属性包含的就是命令行输入的字符。
我们可以更换输出插件的编码器(plain或者line)，查看结果的变化：

./logstash -e "input {stdin {}} output {stdout{codec => line}}"

常用过滤器：

json
kv
grok
geoip
date


vim jvm.options
Xms 1G

-------------------------------------------------------------
# 后台启动
nohup ./logstash -f ../config/logstash.conf &
# 查看日志
tail -f nohup.out
#关闭  
ps -ef|grep logstash 
kill -9 pid
----------------------------------------------------------
# 前台启动
./logstash  -f  ./logstash.conf
----------------------------------------------------------

#  如何修改docker下载的ElasticSearch镜像的Jvm大小？
http://t.zoukankan.com/xiaowei123-p-13789203.html
https://blog.csdn.net/m0_67402125/article/details/126659616

docker exec -it es bash
cd config/
vim jvm.options                     # 需要 调整es的内存使用的大小 ，默认的是4G
-Xms256m
-Xmx256m

然后保存，
然后重启docker 里的 elasticsearch 容器
docker restartelasticsearch

-------------------------------------------logstash.conf  将不通的log文件 映射到不同的索引下----------------------------------------------
input {
   file {
         path => "/data/logstash/logstash-7.13.1/bin/test/aa.log"
         start_position => "beginning"
         tags => ["aa"]
         type => "aa"
   }
}
input {
   file {
         path => "/data/logstash/logstash-7.13.1/bin/test/bb.log"
         start_position => "beginning"
         tags => ["bb"]
         type => "bb"
   }
}
output {
   if [type] == "aa"
   {
        elasticsearch {
        hosts => ["192.168.13.148:9200"]
        index => "aa_log"
        codec => line
        }
   }
   stdout {
      codec => rubydebug
   }
}
output {
   if [type] == "bb"
   {
        elasticsearch {
            hosts => ["192.168.13.148:9200"]
            index => "bb_log"
            codec => line
        }
   }
   stdout {
      codec => rubydebug
   }
}
---------------------logstash.conf-------------------------------------------------------------------------------------------------
input{
  file{
    path    => "/var/log/*.log"
    exclude => "error.log"            # 排除上面路径下所有的error.log
    start_position => "beginning"
    tags => [ "web", "nginx" ]
    type => "access-log"
    add_field =>{
        "project" => "nginx-access-log"
        "app" => "nginx"
    }

    hosts: ["192.168.13.148:9200"]  指定es的地址
    index: es的索引
    index: "xxxx-log-%{+YYYY.MM.dd}"
    index => "%{[fields][product_type]}-transaction-%{+YYYY-MM}"
    user:     es 用户名
    password: es 密码
  }
}

filter{
  json {
      source => "message"
      skip_on_invalid_json => true
  }
}

output{
    stdout {

    }
}
