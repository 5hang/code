构建指令：

FROM：      基础镜像，当前镜像是基于哪个镜像的，指定一个基础的镜像
MAINTAINER：留下镜像的作者大名
RUN：       容器构建时候就运行的命令：shell格式  exec格式

EXPOSE： 当前容器对外暴露的端口
WORKDIR：指定创建容器后，终端默认进来的目录
USER：   指定该镜像什么用户去执行，默认root
ENV：    设置环境变量
ADD：    将宿主机目录下的文件copy到镜像里面，自动处理url和解压文件的
COPY：   copy文件
VOLUME： 容器卷，保存数据的地址
CMD：    指定容器启动后需要干的事情，支持 shell格式 exec格式的命令 ，cmd 参数会被执行命令参数替代的
ENTRYPOINT：用来指定一个容器启动时候需要运行的命令，类似cmd指令，但是ENTRYPOINT不会被docker run 后面的
命令覆盖，而且这些命令参数会被当做参数送给ENTRYPOINT指令指定的程序


RUN：命令实在构建时候执行，CMD：实在run时候执行的


实例1：
centos7 镜像具备 vim+ifconfig+jdk8
docker pull centos 


// -t name 必须是小写字母奥
docker build -f dockerfile  -t mydocker:1.1 . 




history mycentos:1.1     查看制作的这个docker镜像的步骤 
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
276dff5d8a73        2 minutes ago       /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B                  
3859a4af80c4        2 minutes ago       /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B                  
d84757e99ad1        2 minutes ago       /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B                  
03bec4e9bce7        2 minutes ago       /bin/sh -c #(nop)  EXPOSE 80                    0B                  
6e26a7c230c0        2 minutes ago       /bin/sh -c yum -y install  net-tools            194MB               
6683a0288510        2 minutes ago       /bin/sh -c yum -y install  vim                  249MB               
dfcddffc7eed        3 minutes ago       /bin/sh -c #(nop) WORKDIR /zhangsan             0B                  
d076ba10a1a9        3 minutes ago       /bin/sh -c #(nop)  ENV path1=/zhangsan          0B                  
47165a917cfa        3 minutes ago       /bin/sh -c #(nop)  MAINTAINER zhangsan<6666@…   0B                  
eeb6ee3f44bd        15 months ago       /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B                  
<missing>           15 months ago       /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  
<missing>           15 months ago       /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB     

dockerfile  例子：
******************************************************************************
FROM centos:7.9.2009
MAINTAINER  zhangsan<6666@qq.com>

ENV path1  /zhangsan

WORKDIR $path1

ADD ./protobuf-all-3.11.2.tar.gz   $path1

RUN yum -y install  vim
RUN yum -y install  net-tools

EXPOSE 80

CMD echo $path1
CMD echo "first docker file make success ..."
CMD /bin/bash
******************************************************************************
go 项目 docker镜像制作

编译go项目  发现centos下编译生成的二进制文件，拿进alpine下运行时有问题的。

go build -tags netgo -o  app  main.go

*******************docker_go************************
FROM alpine:3.12 
RUN mkdir "/app"
WORKDIR "/app"
COPY app  /app/app
RUN chmod +x /app/app
ENTRYPOINT ["./app"]
*******************************************
制作镜像
docker build -f docker_go -t testgo:1
运行镜像
docker run  -it  -v  /home/zhangsan/docker/:/app   testgo:1     ---注意 -v ： 后面的路径可以是文件夹映射，也可以是文件映射， 但是要是绝对路径奥

*********************使用FROM golang:alpine 镜像 制作go项目的dockers镜像***********************
docker pull golang:alpine
FROM golang:alpine   如果docker_go FROM 这个镜像的话 ，在编译go源码的时候就默认就可以了
docker run -d  -v /home/zhangsan/docker/:/app  testgofromgolane:1.1

也可以让docker_go  FROM ubuntu 镜像 试试奥
golang:alpine 镜像 300M
ubuntu 镜像  70M
alpine 镜像   4M


