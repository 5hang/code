 centos 7 安装docker 要求64位， linux内核 3.8+
 
 **********************安装前提***************
 cat   /etc/redhat-release
 uname -r
 
 docker镜像 可以创建多个容器
 
 
 Uninstall old versions
 
 docker 卸载
 sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
            
 systemctl stop docker
 yum remove  docker-ce docker-ce-cli  containerd.io
 rm -rf /var/lib/docker
 rm -rf /var/lib/containerd
 
安装相关环境
yum -y install gcc
yum -y install gcc-c++
yum install -y yum-utils
设置阿里云仓库
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum makecache fast
安装docker
yum -y install docker-ce docker-ce-cli  containerd.io

启动docker
 systemctl start docker
 
 docker version
 
 docker run hello-world
 
 设置阿里云 容器镜像加速器******https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors
 *************************************************************
 加速器地址
https://s38gbj2u.mirror.aliyuncs.com
https://s38gbj2u.mirror.aliyuncs.com
复制
操作文档
Ubuntu
CentOS
Mac
Windows
1. 安装／升级Docker客户端
推荐安装1.10.0以上版本的Docker客户端，参考文档docker-ce

2. 配置镜像加速器
针对Docker客户端版本大于 1.10.0 的用户

您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器

sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://s38gbj2u.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
 *************************************************************
 
 
 docker 常用命令
 帮助启动类：
           systemctl start docker
           systemctl stop docker
           systemctl restart docker 
           systemctl status docker 
           systemctl enable docker
           docker info 
           docker --help
 
 镜像命令类：
************** docker images   -a 列出本地所有镜像，-q只显示镜像的id
 REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
hello-world   latest    feb5d9fea6a5   12 months ago   13.3kB
 仓库源          版本        

************** docker search xxx            搜索远程仓库是否有某个镜像，                                  官方认证了
 [root@192 zhangsan]# docker search hello-world
NAME                                       DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
hello-world                                Hello World! (an example of minimal Dockeriz…   1859      [OK]       
                                                                   0       
************** docker pull 镜像名字ID：TAG
  docker pull redis:6.2
  docker pull ubuntu
  docker pull centos
  
************** docker system df 查看镜像容器占用空间

**************   删除本地所有镜像
docker rmi -f $(docker images -qa)

************** docker rmi xxx  删除本地的镜像
      docker rmi -f  IMAGE ID
      docker rmi -f  hello-world
      
 容器命令：
    docker run xx  启动交互式容器

    --name = 容器的名字  给容器起一个名字 ，通过docker ps 可以查看到的名字
    -d：     后台运行容器 并且返回容器ID，
 
    -i:  以交互模式运行容器，通常和-t 同时使用的
    -t：为容器分配一个伪输入终端，
    
    -P:随机端口
    -p：指定端口映射  -p  8080:80
 
root@192 zhangsan]# docker run -it  ubuntu /bin/bash   启动交互式容器
root@0a2384bf7fed:/# exit 

docker run -it  --name="aaa"  ubuntu  /bin/bash  

docker ps 列出所有运行中的实例
[root@192 zhangsan]# docker ps
CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES
ae0591d1d13e   ubuntu    "/bin/bash"   2 seconds ago   Up 2 seconds             boring_williamson

 容器的推出机制：
   run进去的容易 exit 推出，容器会停止的
   ctrl+p+q： 这种方式推出，容器不会停止
   
 启动已经停止运行的容器：docker start 容器id或者名字
 重启容器：docker restart 容器id或者名字
 停止容器：docker stop   容器id或者名字
 强制停止容器： docker kill 容器id或者名字
 删除停止运行的容器：docker rm 容器id或者名字
 
docker ps -n 2
CONTAINER ID   IMAGE     COMMAND                 CREATED         STATUS                     PORTS     NAMES
39612d297e08   ubuntu    "/bin/bash"             6 minutes ago   Exited (0) 5 minutes ago             aaa
70321f543dad   ubuntu    "-name=000 /bin/bash"   7 minutes ago   Created                              xenodochial_ganguly


docker 后台启动：
docker run -d centos   注意：docker容器后台的运行，就必须有一个前台的进程，否则自动推出了
docker run -d redis:6.2

docker logs   容器id或者名字   ---查看容器的日志
docker top    容器id或者名字   ---查看容器的运行进程信息
docker inspect 容器id或者名字  --- 查看容器的信息


docker exec -it 83af7f5ea148  bash   重新进入或者的容易，并且交互  （默认用这个的）
docker attach 容器id            （就是它进入后执行exit会导致容器停止）           
   exec   attach的区别：
   attach：直接进入容器启动命令的终端，不会启动新的进程，用exit推出，会导致容器的停止
   exec 是在容器打开新的终端，并且可以启动新的进程  ，用exit退出，不会导致容器停止


从容器拷贝数据到主机上来：

docker cp 容器ID：容器路径   目的主机路径  在主机外部执行

docker export 容器ID > xxx.tar  把整个容器备份

cat xxx.tar | docker import -镜像用户/镜像名字：版本号  （相当于在本地创建这个镜像）docker -ps 查询看


镜像的分层：联合文件系统，********************************

docker文件有一层层文件系统组成

默认的linux系统只有  ： （linux内核）bootfs rootfs


docker分层 就是为了资源共享，方便迁移，复用的。


docker commit -m ="提交的描述信息"  -a="作者"  容器id 目标镜像名字：标签  

***************************************************
-------------------------------------- 宿主机：容器  之间的路径 数据共享
docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data --name-uu1 ubuntu

docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data:rw --name-uu1 ubuntu    容器可读可写（默认）

docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data:ro --name-uu1 ubuntu    容器只读


新建一个  容器继承  继承指定 容器的创建的规则
docker run -it --privileged=true  --volumes-from uu1 --name u2 ubuntu

docker运行tomcat  
docker pull billygoo/tomcat8-jdk8   不用最新的版本tomcat  默认访问没有那一直猫
docker run -d -p 8080:8080 --name tm1  billygoo/tomcat8-jdk8


docker pull mysql:5.7
docker run -d -p 3300:3306  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7  简单
docker run -d -p 3000:3306 --privileged=true  -v /tmp/mysql/log:/var/log/mysql  -v /tmp/mysql/data:/var/lib/mysql  -v /tmp/mysql/conf:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456   --name mysql  mysql:5.7              正式


这里增加的卷的配置，即使删除了docker实例  ，重新执行运行一次 ，又可以回来了
docker中MySQL的字符编码默认配置错误需要修改的 
*************************************************** 进入/tmp/mysql/conf
[root@xxx conf]# vi my.cnf  
[client]
default_character_set=utf8
[mysqld]
collation_server = utf8_general_ci
character_set_server = utf8
***************************************************
重启mysql 
docker restart mysql


> SHOW  VARIABLES LIKE 'character%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8           ****            | client 和 database的必须是utf8
| character_set_connection | utf8                       |
| character_set_database   | utf8            ****           |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+

***************************************************
docker运行redis
docker pull redis:7.0.2
docker run -p 4000:6379  --name redis --privileged=true -v /tmp/redis/redis.conf:/etc/redis/redis.conf  -v /tmp/redis/data:/data -d redis:7.0.2  redis-server /etc/redis/redis.conf


docker run -it ubuntu /bin/bash
apt-get update
apt-get -y install vim 
新打开一个窗口  docker ps 6f413cdb0540
docker commit -m="with vim" -a="xxx" 6f413cdb0540  myubuntu:1.2
sha256:a2178fb15d8d820c399e73c919e2bae6ad2d2ffccdd61fe2a592e33f360c0f47

docker images  新创建的镜像就有了

 
