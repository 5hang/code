centos 7 安装docker 要求64位， linux内核 3.8+
cat /etc/redhat-release
uname -r
 
docker-compose 安装
curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
docker-compose -v 

  
 docker 卸载
 sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
            
systemctl stop docker
yum remove  docker-ce docker-ce-cli  containerd.io
rm -rf /var/lib/docker
rm -rf /var/lib/containerd
 
安装相关环境
yum -y install gcc
yum -y install gcc-c++
yum install -y yum-utils
设置阿里云仓库
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum makecache fast
安装docker
yum -y install docker-ce docker-ce-cli  containerd.io

 systemctl start docker

 systemctl enable docker
 
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://s38gbj2u.mirror.aliyuncs.com"]
}
EOF

*****************************安装k8s  calico 网络需要加的***************************************
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": [
        "https://s38gbj2u.mirror.aliyuncs.com",
        "https://7mimmp7p.mirror.aliyuncs.com",
        "https://registry.docker-cn.com",
        "http://hub-mirror.c.163.com",
        "https://docker.mirrors.ustc.edu.cn"
        ],
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

sudo systemctl daemon-reload
sudo systemctl restart docker

docker version
docker info 
docker --help
  
docker images   -a 列出本地所有镜像，-q只显示镜像的id 

docker search xxx            搜索远程仓库是否有某个镜像 

docker pull 镜像名字ID：TAG
docker pull redis:6.2
docker system df 查看镜像容器占用空间

docker rmi -f $(docker images -qa)

sudo docker rm $(sudo docker ps -a -q)

docker rmi -f  IMAGE ID
docker rmi -f  hello-world

 容器命令：
    docker run xx  启动交互式容器

    --name = 容器的名字  给容器起一个名字 ，通过docker ps 可以查看到的名字
    -d：     后台运行容器 并且返回容器ID，
 
    -i:  以交互模式运行容器，通常和-t 同时使用的
    -t：为容器分配一个伪输入终端，
    
    -P:随机端口
    -p：指定端口映射  -p  8080:80
   
docker ps -a  列出所有的容器 包含停止运行的容器
docker ps     列出运行的容器
docker ps -q  列出的内容只包含名字

容器的推出机制：
run进去的容易 exit 推出，容器会停止的
ctrl+p+q： 这种方式推出，容器不会停止

启动已经停止运行的容器：docker start 容器id或者名字
重启容器：docker restart 容器id或者名字
停止容器：docker stop   容器id或者名字
强制停止容器： docker kill 容器id或者名字
删除停止运行的容器：docker rm 容器id或者名字
 
docker ps -n 2
CONTAINER ID   IMAGE     COMMAND                 CREATED         STATUS                     PORTS     NAMES
39612d297e08   ubuntu    "/bin/bash"             6 minutes ago   Exited (0) 5 minutes ago             aaa
70321f543dad   ubuntu    "-name=000 /bin/bash"   7 minutes ago   Created                              xenodochial_ganguly


docker 后台启动：
docker run -d centos   注意：docker容器后台的运行，就必须有一个前台的进程，否则自动推出了
docker run -d redis:6.2

docker logs  -f  容器id或者名字   ---实时监控的查看容器的日志
docker logs     容器id或者名字   ---查看容器的日志
docker top      容器id或者名字   ---查看容器的运行进程信息
docker inspect  容器id或者名字  --- 查看容器的信息

数据卷
docker  run -v  宿主机路径：容器内部路径   这种方式会以宿主机的内容为主，如果宿主机内容是空，那么第一次回把容器中的内容清空的
docker  run -v   aa别名:容器内部路径       使用别名创建的路径映射会以容器中的内容为主 
                 别名默认的路径在 /var/lib/docker/volumes 下 的

docker exec -it 83af7f5ea148  bash   重新进入或者的容易，并且交互  （默认用这个的）
docker attach 容器id            （就是它进入后执行exit会导致容器停止）           
   exec   attach的区别：
   attach：直接进入容器启动命令的终端，不会启动新的进程，用exit推出，会导致容器的停止
   exec 是在容器打开新的终端，并且可以启动新的进程  ，用exit退出，不会导致容器停止


镜像的备份和回复
********************************************
docker save redis:6.2.6 -o  redis6.2.6.tar
docker load -i redis6.2.6.tar
********************************************

docker cp 容器ID：容器路径   目的主机路径  在主机外部执行

docker export 容器ID > xxx.tar  把整个容器备份

cat xxx.tar | docker import -镜像用户/镜像名字：版本号  （相当于在本地创建这个镜像）docker -ps 查询看


镜像的分层：联合文件系统，********************************

docker文件有一层层文件系统组成

默认的linux系统只有  ： （linux内核）bootfs rootfs


docker分层 就是为了资源共享，方便迁移，复用的。


docker commit -m ="提交的描述信息"  -a="作者"  容器id 目标镜像名字：标签  

***************************************************
-------------------------------------- 宿主机：容器  之间的路径 数据共享
docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data --name-uu1 ubuntu

docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data:rw --name-uu1 ubuntu    容器可读可写（默认）

docker run -it --privileged=true  -v /tmp/host_data:/tmp/docker_data:ro --name-uu1 ubuntu    容器只读


新建一个  容器继承  继承指定 容器的创建的规则
docker run -it --privileged=true  --volumes-from uu1 --name u2 ubuntu

docker运行tomcat  
docker pull billygoo/tomcat8-jdk8   不用最新的版本tomcat  默认访问没有那一直猫
docker run -d -p 8080:8080 --name tm1  billygoo/tomcat8-jdk8



*******************************************************************Docker 部署***********************************************************************************
docker运行mysql
docker pull mysql:5.7
docker run -d -p 3306:3306  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7  简单
docker run -d -p 3306:3306 --privileged=true  -v /tmp/mysql/log:/var/log/mysql  -v /tmp/mysql/data:/var/lib/mysql  -v /tmp/mysql/conf:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=123456   --name mysql  mysql:5.7
 
这里增加的卷的配置，即使删除了docker实例  ，重新执行运行一次 ，又可以回来了
docker中MySQL的字符编码默认配置错误需要修改的 
*************************************************** 进入/tmp/mysql/conf
[root@xxx conf]# vi my.cnf      这里的my.cnf  会同步到 /etc/mysql/conf.d/下面去，，重启mysql 就生效了奥
[client]  
default_character_set=utf8
[mysqld]
collation_server = utf8_general_ci
character_set_server = utf8
***************************************************
重启mysql                  
docker restart mysql

# docker 备份mysql 数据库数据的命令     备份所有数据库
$ docker exec mysql容器ID  sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > /root/all-databases.sql
                                       备份指定数据库
$ docker exec mysql容器ID  sh -c 'exec mysqldump  databases 库的名字 -uroot -p"$MYSQL_ROOT_PASSWORD"' > /root/库的名字.sql
                                     备份指定数据库表的结构+不要数据
$ docker exec mysql容器ID  sh -c 'exec mysqldump  --node-data databases 库的名字 -uroot -p"$MYSQL_ROOT_PASSWORD"' > /root/库的名字.sql


> SHOW  VARIABLES LIKE 'character%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8           ****            | client 和 database的必须是utf8
| character_set_connection | utf8                       |
| character_set_database   | utf8            ****           |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+vs
**************************mysql 访问权限设置************************** mysql user表是 user host的联合主键奥
 开启MySQL/MariaDB的远程访问权限
MariaDB [mysql]> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456';    //这句话的意思是：赋予所有权限给'root'这个用户(也可以是其他用户比如'zhangsan')，在 '%'这台主机（%表示任何主机，也可以改为具体的192.168.1.20这个主机）上使用"123456"这个密码登陆数据库；
MariaDB [mysql]>  flush privileges;   //更新权限；
MariaDB [mysql]>  select user,host,password from user;   //查询是否设置成功，成功后即可使用工具远程连接数据库
删除用户
MariaDB [mysql]> DELETE FROM user WHERE User="root" and Host="%";   //删除刚才新建的root用户和允许登陆的主机%;
MariaDB [mysql]> flush privileges;  //刷新权限
（禁用）用户和主机的远程访问的权限；
MariaDB [mysql]> update user set host = "localhost" where user = "root" and host = "%";
***************************************************

 
docker pull redis:6.2.6

redis 6.2.6  源码安装
yum install -y gcc
cd /usr/local
wget https://download.redis.io/releases/redis-6.2.6.tar.gz
tar -zxvf redis-6.2.6.tar.gz
cd redis-6.2.6
make install PREFIX=/usr/local/redis
cp /usr/local/redis-6.2.6/redis.conf /usr/local/redis/bin/
cd /usr/local/redis/bin/
vi redis.conf

*********************************redis 配置解读************************
daemonize yes         #后台启动
pidfile /var/run/redis_6379.pid
logfile ""
databases 16
dbfilename dump.rdb
dir ./

bind 127.0.0.1 0.0.0.0       # 设置本地访问 
port 6379
protected-mode yes           #开启保护模式
requirepass 123456           #访问的密码

save 3600 1
save 300 100
save 60 10000

# maxmemory <bytes>  #可以指定最大内存使用 ，默认无限制内存
# maxmemory 1GB 
appendonly no
appendfilename "appendonly.aof"

***************************下面是dockers 安装reids：6.2.6 详解 ***************************
docker run -p 6379:6379  --name redis --privileged=true -v /tmp/redis/redis.conf:/etc/redis/redis.conf  -v /tmp/redis/data:/data -d redis  redis-server /etc/redis/redis.conf
docker 启动 reids 带指定配置文件时候  ，可以遵循下面的改动 首先复制一个完整的 redis.conf  放在/tmp/reids/下面  然后修改参数
redis:  镜像的启动目录就是 /data    
*********************************************************************************
daemonize no          # 这个参数 和 -d  是冲突哦的  二选一 （如果用docker启动redis  这个就要是no的奥）
pidfile  /data/redis_6379.pid
logfile "/data/redis.log" 
dbfilename dump.rdb
dir /data
bind 0.0.0.0
protected-mode yes      
requirepass 123456   
*********************************************************************************
./redis-cli  shutdown                    #无密码关闭redis
./redis-cli  -a 123456  shutdown        #有密码关闭redis

如果不配置bind，redis将监听本机所有可用的网络接口。
我们想要其他机连接我们的Redis服务，有三种方式：
想办法让Redis运行在protected-mode为no的模式。
如果protected-mode为yes，那么我们可以在Redis服务上设置bind，也就是我们的一台机器有几个ip，指定我们的服务绑定监听本机的哪个ip。
如果protected-mode为yes，除了设置bind外，亦可通过设置密码的形式，也即是设置参数requirepass，从而达到可以从其他机器访问的目标。
实践总结
我们在redis的配置文件中会遇到protected-mode，它直译为保护模式。
如果设置为yes，那么只允许我们在本机的回环连接，其他机器无法连接。
线上Redis服务，为了安全，我们建议将protected-mode设置为yes。
protected-mode设置为yes的情况下，为了我们的应用服务可以正常访问Redis，我们需要设置Redis的bind参数或者密码参数requirepass。






  
 
 
