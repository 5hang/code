
wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.9.tgz
tar -zxvf mongodb-linux-x86_64-rhel70-4.4.9.tgz 

mkdir -p /mongodb/data  /mongodb/log
mv mongodb-linux-x86_64-rhel70-4.4.9  /usr/local/mongodb



*************配置环境变量******************
 vim /etc/profile
export MONGODB_HOME=/usr/local/mongodb
PATH=$PATH:$MONGODB_HOME/bin
  source /etc/profile
  
编辑mongo.conf 
 systemLog:
 destination: file
 path: /mongodb/log/mongod.log
 logAppend: true
storage:
 dbPath: /mongodb/data
 engine: wiredTiger
 journal:
  enabled: true
net:
 bindIp: 0.0.0.0
 port: 27017
processManagement:
 fork: true

配置文件启动mongod

 mongod  -f /usr/local/mongodb/bin/mongo.conf      启动、关闭mongod服务器
 mongod -f  /usr/local/mongodb/bin/mongo.conf --shutdown
 
 
 mongo  打开客户都
 
 MongoDB的存储数据的格式是 BSON 格式
 
******************************************************mongod 语法******************************************************** 
show dbs;                  查询数据库
use mysql;                 切换数据库，不存在就创建
db；                       显示当前所在的数据库

show tables;show collections; 显示数据库



*********************************创建集合的2种方式，1：插入创建  2：手动创建的*************************************************
db.users.insert( { name:"" ,age : 11} );

db.createCollection("test")  创建集合 （不限制大小的集合）
{ "ok" : 1 }
db.createCollection("fixedTest",{capped:true,size:6000000}) 创建固定大小的集合
{ "ok" : 1 }
> db.createCollection("fixed2",{capped:true,size:6142888,max:10000,autoIndexId:true})
{
	"note" : "The autoIndexId option is deprecated and will be removed in a future release",
	"ok" : 1
}

**********************************************插入：insert ******************************************************************** 
db.集合名字.insert({  k:v ,  k:v .... })

db.user.insert([
	{}'
	{}'
	{}
	])   一次插入多个记录

**********************************************更新：update ******************************************************************** 

db.user.update(
	更新条件
	更新数据,
	{
	   upsert:boolean  不存在的更新 那么插入
	   multi:boolean   有多条记录是否所有一起更新呢（默认FALSE）
	}
)

db.user.update(  {name:"zz1"} , {$set:{name:"zzz"}},
          {
 	   upsert:true
	   multi:true 
	  }
   );
db.user.update({name:"zz3"},{$set:{name:"zzz"} },{upsert:true} );

多个条件的更新    多个条件 and、
db.user.update( {name:"zhangsan",age:22},             { $set:{  name:"zhangsanfeng",age:666 } })
		  多个条件 or、
db.user.update( {$or:[ {name:"zzz"},{name:"zz2"}]},    {$set:{name:"ooo"}} ,                        {multi:true } )

**********************************************删除：remove ******************************************************************** 

 db.user.remove({name:"ooo"},{justOne:false})    justOne: 是否只删除一条记录呢

 db.user.remove({})  删除所有的记录

**********************************************   查询   ******************************************************************** *** 

db.user.find();

db.user.find({ k1:v1,k2:v2.... }); 多个条件and

db.user.find({$or:[ {}, {}...]}); 多个条件or

db.user.findOne();

结果格式化显示  .pretty();


********************************************************条件操作符*************************************************************************
  >    $gt
  <    $lt
  >=   $gte
  <=   $lte
  !=   $ne
  ==    :
  
  db.user.find( {  age:{$gt:50 ,$lt:100 } })  查找年龄 大于50 小于100
  
***********************************************************$type 根据数据类型 查找数据************* ******************************************* 
    查找  name 这个字段存储的值是 string的结果
db.user.find({ name:{ $type:2 } })  $type:2 表示string类型

*********************************************************** limit --skip ********************************************************************* 
skip:  跳过的记录数
limit：限制几条记录

db.user.find().limit(2).skip(2) 查询地3,4个记录
db.user.find().skip(2)  、、查询第三条后面的记录

************************************************************* sort***************************************************************************** 
 1：升级
-1：降序

db.user.find().sort({ age:1 })  按照年龄 升序，
db.user.find().sort({ age:-1 }) 按照年龄 降序

**************************************************************聚合函数************************************************************************ 
在MongoDB中 通过聚合操作，实现对数据库（平局值，最大值）返回处理的结果  
函数  aggregate()
db.user.aggregate([
	{
管道：{聚合表达式}
	}

]);

管道：就是把找到的数据进行过滤
  $project: 修改输入文档的结构，可以用来重命名，增加或者删除
  $match:    用来过滤数据，只输出符合条件的文档，$match使用MongoDB的标准查询操作
  $limit:    用来限制MongoDB聚合管道返回的文档数
  $skip:     在聚合管道中跳过指定数量的管道，并返回余下的文档
  $group:    集合中的文档分组，可用于统计结果
  $sort:     将输入文档排序后输出

常用聚合表达式：
   $sum:计算和
   $avg:计算平均
   $min:获取结合中所有文档的最小值
   $max:获取结合中所有文档的最大值
   
   
***********************************************************************************************************************************************
db.user.find().count()  统计记录数




MongoDB 里面的数据类型 不需要手动指定的  ，传入的是什么值，就是什么类型的。

 db.dropDatabase();  删除当前的数据库
{ "dropped" : "mysql", "ok" : 1 }

db.user.drop();  删除一个集合

> use mysql
switched to db mysql
> db.user.insert({name:"zhangsan",age:22})
WriteResult({ "nInserted" : 1 })
> db.user.find({})
{ "_id" : ObjectId("63411b9a249d5b6d74c2d13b"), "name" : "zhangsan", "age" : 22 }
> 

db.user.insertOne({})
db.user.insertMany({})

> db.user.find({name:"zhangsan"}).pretty();
{
	"_id" : ObjectId("63411b9a249d5b6d74c2d13b"),
	"name" : "zhangsan",
	"age" : 22
}
> 

db.user.find({     ...name=aa && (age<30 or item p开头)
 name:"aa",
 $or:[ {age:{$lt:30}},{item: /^p/} ]
})
find 查找 包含、不包含某个字段的方法
db.user.find(({},{"name":1}))
db.user.find(({},{"name":0}))

db.user.find().sort({"orderTime","price":1}).limit(5).skip(5)



