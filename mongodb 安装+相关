
*************************************************************   centos 7 安装 MongoDB 4.4  *********************************************************************

wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.9.tgz
tar -zxvf mongodb-linux-x86_64-rhel70-4.4.9.tgz 

mkdir -p /mongodb/data  /mongodb/log
mv mongodb-linux-x86_64-rhel70-4.4.9  /usr/local/mongodb



*************配置环境变量******************
 vim /etc/profile
export MONGODB_HOME=/usr/local/mongodb
PATH=$PATH:$MONGODB_HOME/bin
  source /etc/profile
  
编辑mongo.conf 
 systemLog:
 destination: file
 path: /mongodb/log/mongod.log
 logAppend: true
storage:
 dbPath: /mongodb/data
 engine: wiredTiger
 journal:
  enabled: true
net:
 bindIp: 0.0.0.0
 port: 27017
processManagement:
 fork: true

配置文件启动mongod

 mongod  -f /usr/local/mongodb/bin/mongo.conf      启动、关闭mongod服务器
 mongod -f  /usr/local/mongodb/bin/mongo.conf --shutdown
 
 
 mongo  打开客户都
 
 MongoDB的存储数据的格式是 BSON 格式
 
******************************************************mongod 语法******************************************************** 
show dbs;                  查询数据库
use mysql;                 切换数据库，不存在就创建
db；                       显示当前所在的数据库

show tables;show collections; 显示数据库



*********************************创建集合的2种方式，1：插入创建  2：手动创建的*************************************************
db.users.insert( { name:"" ,age : 11} );

db.createCollection("test")  创建集合 （不限制大小的集合）
{ "ok" : 1 }
db.createCollection("fixedTest",{capped:true,size:6000000}) 创建固定大小的集合
{ "ok" : 1 }
> db.createCollection("fixed2",{capped:true,size:6142888,max:10000,autoIndexId:true})
{
	"note" : "The autoIndexId option is deprecated and will be removed in a future release",
	"ok" : 1
}

**********************************************插入：insert ******************************************************************** 
db.集合名字.insert({  k:v ,  k:v .... })

db.user.insert([
	{}'
	{}'
	{}
	])   一次插入多个记录

**********************************************更新：update ******************************************************************** 

db.user.update(
	更新条件
	更新数据,
	{
	   upsert:boolean  不存在的更新 那么插入
	   multi:boolean   有多条记录是否所有一起更新呢（默认FALSE）
	}
)

db.user.update(  {name:"zz1"} , {$set:{name:"zzz"}},
          {
 	   upsert:true
	   multi:true 
	  }
   );
db.user.update({name:"zz3"},{$set:{name:"zzz"} },{upsert:true} );

多个条件的更新    多个条件 and、
db.user.update( {name:"zhangsan",age:22},             { $set:{  name:"zhangsanfeng",age:666 } })
		  多个条件 or、
db.user.update( {$or:[ {name:"zzz"},{name:"zz2"}]},    {$set:{name:"ooo"}} ,                        {multi:true } )

**********************************************删除：remove ******************************************************************** 

 db.user.remove({name:"ooo"},{justOne:false})    justOne: 是否只删除一条记录呢

 db.user.remove({})  删除所有的记录

**********************************************   查询   ******************************************************************** *** 

db.user.find();

db.user.find({ k1:v1,k2:v2.... }); 多个条件and

db.user.find({$or:[ {}, {}...]}); 多个条件or

db.user.findOne();

结果格式化显示  .pretty();


********************************************************条件操作符*************************************************************************
  >    $gt
  <    $lt
  >=   $gte
  <=   $lte
  !=   $ne
  ==    :
  
  db.user.find( {  age:{$gt:50 ,$lt:100 } })  查找年龄 大于50 小于100
  
***********************************************************$type 根据数据类型 查找数据************* ******************************************* 
    查找  name 这个字段存储的值是 string的结果
db.user.find({ name:{ $type:2 } })  $type:2 表示string类型

*********************************************************** limit --skip ********************************************************************* 
skip:  跳过的记录数
limit：限制几条记录

db.user.find().limit(2).skip(2) 查询地3,4个记录
db.user.find().skip(2)  、、查询第三条后面的记录

************************************************************* sort***************************************************************************** 
 1：升级
-1：降序

db.user.find().sort({ age:1 })  按照年龄 升序，
db.user.find().sort({ age:-1 }) 按照年龄 降序

**************************************************************聚合函数************************************************************************ 
在MongoDB中 通过聚合操作，实现对数据库（平局值，最大值）返回处理的结果  
函数  aggregate()
db.user.aggregate([
	{
管道：{聚合表达式}
	}

]);

管道：就是把找到的数据进行过滤
  $project: 修改输入文档的结构，可以用来重命名，增加或者删除
  $match:    用来过滤数据，只输出符合条件的文档，$match使用MongoDB的标准查询操作
  $limit:    用来限制MongoDB聚合管道返回的文档数
  $skip:     在聚合管道中跳过指定数量的管道，并返回余下的文档
  $group:    集合中的文档分组，可用于统计结果
  $sort:     将输入文档排序后输出

常用聚合表达式：
   $sum:计算和
   $avg:计算平均
   $min:获取结合中所有文档的最小值
   $max:获取结合中所有文档的最大值
   
***************************  1
   > db.student.find();
{ "_id" : ObjectId("63417041e97c78c2d8af31f9"), "name" : "张三", "age" : 18, "sex" : "男", "grade" : 78 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fa"), "name" : "李三", "age" : 18, "sex" : "女", "grade" : 88 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fb"), "name" : "赵三", "age" : 18, "sex" : "女", "grade" : 68 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fc"), "name" : "王三", "age" : 18, "sex" : "男", "grade" : 98 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fd"), "name" : "孙三", "age" : 18, "sex" : "男", "grade" : 76 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fe"), "name" : "韩三", "age" : 18, "sex" : "男", "grade" : 73 }

***************************  2
> db.student.aggregate([{  $group:{ _id:"$sex", sumgrade:{$sum:"$grade" }}     }    ])   统计男女各自的总分数
{ "_id" : "男", "sumgrade" : 325 }
{ "_id" : "女", "sumgrade" : 156 }
> 

***************************  3
> db.student.aggregate([{  $group:{ _id:"$sex", sumgrade:{$avg:"$grade" }}     }    ])     统计男女各自的平均分数
{ "_id" : "男", "sumgrade" : 81.25 }
{ "_id" : "女", "sumgrade" : 78 }

***************************  4
> db.student.aggregate([{  $group:{ _id:"$sex", sumgrade:{$sum:1 }}     }    ])   统计男女各自总人数

***************************  5
> db.student.aggregate([{  $group:{ _id:null,renshu:{$sum:1},agv:{$avg:"$grade"}  }   }])  统计总人数  平均分
{ "_id" : null, "renshu" : 6, "agv" : 80.16666666666667 }
> 

***************************  6
> db.student.aggregate([                           	统计男女各自总人数  升序排序
     {  $group:{ _id:"$sex", renshu:{$sum:1 }}},
     {  $sort:{renshu:1} }]) 
        
{ "_id" : "女", "renshu" : 2 }
{ "_id" : "男", "renshu" : 4 }

***************************  7
> db.student.aggregate([ 				统计age 大于2的 前2个
	{ $match:{age:{$gte:2}} },
	{ $limit:2 }])   
{ "_id" : ObjectId("63417041e97c78c2d8af31f9"), "name" : "张三", "age" : 18, "sex" : "男", "grade" : 78 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fa"), "name" : "李三", "age" : 18, "sex" : "女", "grade" : 88 }
> 

***************************  8
> db.student.aggregate([				统计男的最高分
	{ $match:{sex:"男"}},
	{$group:{_id:"$sex",maxgrade:{$max:"$grade"}}}])
{ "_id" : "男", "maxgrade" : 98 }
> 

***************************  9
$project  修改文档的结构，包含 _id name age 三个字段  
等同于select name , age from student;
db.student.aggregate([		
	{
		$project:{name:1,age:1}	     	字段名：1  表示获取这个字段的所有内容
	}
]);
{ "_id" : ObjectId("63417041e97c78c2d8af31f9"), "name" : "张三", "age" : 18 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fa"), "name" : "李三", "age" : 18 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fb"), "name" : "赵三", "age" : 18 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fc"), "name" : "王三", "age" : 18 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fd"), "name" : "孙三", "age" : 18 }
{ "_id" : ObjectId("63417041e97c78c2d8af31fe"), "name" : "韩三", "age" : 18 }
> 

***************************  10
查询分数大于70  小于等于90 的总人
db.student.aggregate([
{
	$match:{grade:{$gt:70,$lte:90}}
},
{
	$group:{_id:null, renshu:{$sum:1}}
}
])
{ "_id" : null, "renshu" : 4 }

***************************  11
查询 跳过文档的前 5 个
db.student.aggregate([{
 	$skip:5
}])


*******************************************************************  索 引 **************************************************************************
                            索引针对一个多个字段做排序的结构  主要在用户遍历数据时候需要（集合中的索引的个数能超过 64 个）

创建索引  索引的额外开销，每个索引占据一定的存储空间，在进行插入，更新删除操作也要对所有进行操作的
db.user.createIndex({字段：1，-1}  ,{索引名字，类型})

ensureIndex()  => createIndex()的前身

 db.student.createIndex({name:1},{name:"hahahahha"})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> 

查询索引
> db.student.getIndexes();
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_"
	},
	{
		"v" : 2,
		"key" : {
			"name" : 1
		},
		"name" : "hahahahha"
	}
]
> 

系统自带的索引 无法删除的

db.user.dropIndexes()
db.user.dropIndex("")

> db.student.dropIndex("hahahahha")   这里的 hahahahha 是通过 getindex 获取后的名字
{ "nIndexesWas" : 2, "ok" : 1 }
> 

创建组合索引
 db.student.createIndex({name:1,age:1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.student.getIndexes();
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_"
	},
	{
		"v" : 2,
		"key" : {
			"name" : 1,
			"age" : 1
		},
		"name" : "name_1_age_1"   系统生成索引给的名字
	}
]
> 

创建唯一索引   (这一列就不能重复了奥)
db.user.createIndex({name:1}{unique:"name"})

全文索引  mongodb 2.6 后 ，默认开启了 全文的检索了***********************************************************************
> db.post.insert({post_text:"hello word mongodb QF",tags:["DB","mongodb"]]})
uncaught exception: SyntaxError: missing } after property list :
@(shell):1:71
> db.post.insert({post_text:"hello word mongodb QF",tags:["DB","mongodb"]})
WriteResult({ "nInserted" : 1 })
 
> db.post.find()
{ "_id" : ObjectId("63424cd8611e5250eb8a38ee"), "post_text" : "hello word mongodb QF", "tags" : [ "DB", "mongodb" ] }
> db.post.createIndex({post_text:"text"})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> 
 全文索引的查找
> db.post.find({$text:{$search:"db"}})

***********************************************************数据库的备份  恢复**************************************************************** 

****************备份
mongodump   -h:   mongodb所在服务的ip：27017
	    -d：  需要备份的数据库实例：例如 test、mysql
	    -o：  备份数据存放的位置


mongodump -h 127.0.0.1  -d test  -o  ./benfen/                 备份数据库
 
mongodump --collectioon 表名字  --db 数据库名字  -o ./benfen/    备份table

****************恢复
mongorestore -h mongodb主机的地址 -d 数据库名字  数据库所在的路径(路径要写到最里面一层)

mongorestore -h 127.0.0.1 -d newTest ./benfen/test

************************************************************

db.user.find().count()  统计记录数




MongoDB 里面的数据类型 不需要手动指定的  ，传入的是什么值，就是什么类型的。

 db.dropDatabase();  删除当前的数据库
{ "dropped" : "mysql", "ok" : 1 }

db.user.drop();  删除一个集合

> use mysql
switched to db mysql
> db.user.insert({name:"zhangsan",age:22})
WriteResult({ "nInserted" : 1 })
> db.user.find({})
{ "_id" : ObjectId("63411b9a249d5b6d74c2d13b"), "name" : "zhangsan", "age" : 22 }
> 

db.user.insertOne({})
db.user.insertMany({})

> db.user.find({name:"zhangsan"}).pretty();
{
	"_id" : ObjectId("63411b9a249d5b6d74c2d13b"),
	"name" : "zhangsan",
	"age" : 22
}
> 

db.user.find({     ...name=aa && (age<30 or item p开头)
 name:"aa",
 $or:[ {age:{$lt:30}},{item: /^p/} ]
})
find 查找 包含、不包含某个字段的方法
db.user.find(({},{"name":1}))
db.user.find(({},{"name":0}))

db.user.find().sort({"orderTime","price":1}).limit(5).skip(5)



