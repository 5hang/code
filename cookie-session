http 协议 三个版本

http1.0: 无状态，短链接
http1.1: 可以记录状态 
http2.0: 支持长连接  connection:keep-alive

cookie session 一定时间存储用户的信息
cookie 不安全：数据存储浏览器上，session存储在服务器中，一般是临时session ，回话结束
               浏览器关闭，session被干掉了

func (c *Context)SetCookie(name,value,maxAge int,path,domin string ,secure, httpOnly bool)

name: 名称 相当于key
value: 内容
maxAge: 最大生命周期
        =0：表示没指定该属性
        <0: 表示删除
        >0: 设置时间  单位 s
        
path：   路径  通常 ""
domain： 域名  ip 地址
secure： 设置是否安全保护， true:不能在地址栏查看，false：可以在地址栏查看的
httpOnly:是否正对http协议的

val，err:= context.Cookie("key")


session操作： 
gin-session:插件的地址：https://github.com/p1hang/sessions
gin 框架默认不支持session 需要使用插件

func NewStore(size int ,network,address,password string,,,,,)
password:使用redis做容器使用的密码，没有特殊传入""
[]byte("secret") session加密密钥

package main

import (
  "github.com/bradfitz/gomemcache/memcache"
  "github.com/gin-contrib/sessions"
  "github.com/gin-contrib/sessions/memcached"
  "github.com/gin-gonic/gin"
)

func main() {
  r := gin.Default()
  // session 存储使用的容器 支持多种容器，
  store := memcached.NewStore(memcache.New("localhost:11211"), "", []byte("secret"))
  
  // store.Options();//设置临时session
  r.Use(sessions.Sessions("mysession", store))

  r.GET("/incr", func(c *gin.Context) {
    session := sessions.Default(c)
    var count int
    v := session.Get("count")
    if v == nil {
      count = 0
    } else {
      count = v.(int)
      count++
    }
    session.Set("count", count)
    session.Save()
    c.JSON(200, gin.H{"count": count})
  })
  r.Run(":8000")
}

获取session：
 v:=s.Get("itcast")
 fmt.Println("get session:   ",v.(string))
