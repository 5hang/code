 // 主从redis  同步的时候 主的挂了，key没有及时同步，从节点的key不存在，就可以重新枷锁了
    // 可以将redis 查询的key 分段成多份，这样多线程访问并发的竞争就没那么激烈了
    // redis缓存 数据库 双写不一致的问题
    // 可以使用redis 读写锁

    @GetMapping("/deduct_stock")
    public String deductStock() {
            String lockKey = "product_101";
            String clientID = UUID.randomUUID().toString();   // 这个id 不能是线程的id  线程的id在分布式下，也可能相同
            // 传入当前的线程id， 超时时间的
            Boolean result = stringRedisTemplate.opsForValue().setIfAbsent(lockKey,clientID,10,TimeUnit.SECONDS);
            if(!result) {
                return "error code";
            }
         try {
             int stock = Integer.parseInt(stringRedisTemplate.opsForValue().get("stock"));
             if(stock >0){
                 int realStock = stock-1;
                 stringRedisTemplate.opsForValue().set("stock",realStock+"");
                 System.out.println("扣减成功，剩余库存： " + realStock);
             }else{
                 System.out.println("扣减失败了");
             }
         }finally {
         
           // *****************************释放方式1***********************************
             // 避免一个线程执行时间太长了，超时了另一个线程又进来了，
            if(clientID.equals(stringRedisTemplate.opsForValue().get(lockKey))){
                stringRedisTemplate.delete(lockKey);
            }
            // 判断 锁 和释放锁 需要原子操作的奥
             // *****************************释放方式2***********************************
             
              stringRedisTemplate.execute(
                unlock.lua,
                lockKey,
                threadId
              );
             
              // ****************************************************************
         }
         return "end";
    }
    
    
    
    
    unlock.lua 脚本文件：
    
    释放锁的时候需要原子操作 ，redis 提供了执行的lua脚本  ，脚本的命令都是原子操作的
    if(redis.call( 'get' , KEYS[1] == ARGV[1] ) then
      return redis.call('del', KEYS[1])
    end
    return 0
    
    
    
    
    
    
    
