mongod -f ./mongod.conf

mongod --shutdown --dbpath ./dbpath/

mongo  

use admin

db.auth("root","root")

////////////////

db.createCollection("user1")  创建集合

                            限制容量       最大2000k    最大的条数
db.createCollection("hi",{"capped":true ,"size":2000 ,"max":100 ,"autoIndexId":true } ) ;
{
        "note" : "The autoIndexId option is deprecated and will be removed in a future release",
        "ok" : 1
}


 show collections;
 
 
 db.hi.stats();     查看表的详情
{
        "ns" : "test.hi",
        "size" : 0,
        "count" : 0,
        "storageSize" : 4096,
        "freeStorageSize" : 0,
        "capped" : true,
        "max" : 100,
        "maxSize" : 2048,
        "sleepCount" : 0, 




> db.c.drop();  删除表



> db.user.insert({ "name":"zhangsan" ,"age":88 })
WriteResult({ "nInserted" : 1 })
> db.user.save({ "name":"hehe" ,"age":99 })
WriteResult({ "nInserted" : 1 })
> db.user.insertOne({ "name":"one" ,"age":55  })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("6386e2f10346b30ec081c93a")
} 
> db.user.save([{},{}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
}) 
> db.user.find()
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "name" : "zhangsan", "age" : 88 }
{ "_id" : ObjectId("6386e2d30346b30ec081c939"), "name" : "hehe", "age" : 99 }
{ "_id" : ObjectId("6386e2f10346b30ec081c93a"), "name" : "one", "age" : 55 }
{ "_id" : ObjectId("6386e3430346b30ec081c93c") }
{ "_id" : ObjectId("6386e3430346b30ec081c93d") }


> db.user.find()
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "name" : "zhangsan", "age" : 88 }
{ "_id" : ObjectId("6386e2d30346b30ec081c939"), "name" : "hehe", "age" : 99 }
{ "_id" : ObjectId("6386e2f10346b30ec081c93a"), "name" : "one", "age" : 55 }
{ "_id" : ObjectId("6386e3430346b30ec081c93c") }
{ "_id" : ObjectId("6386e3430346b30ec081c93d") }
> db.user.find({"name":"one"})
{ "_id" : ObjectId("6386e2f10346b30ec081c93a"), "name" : "one", "age" : 55 }
> db.user.find({ "age" : {$lte:70}})
{ "_id" : ObjectId("6386e2f10346b30ec081c93a"), "name" : "one", "age" : 55 }
> db.user.findOne();
{
        "_id" : ObjectId("6386e2b30346b30ec081c938"),
        "name" : "zhangsan",
        "age" : 88
}
          // 查询投影查询  约束， 0 不需要  1需要的
> db.user.find({},{"name":0})
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "age" : 88 }
{ "_id" : ObjectId("6386e2d30346b30ec081c939"), "age" : 99 }
{ "_id" : ObjectId("6386e2f10346b30ec081c93a"), "age" : 55 }
{ "_id" : ObjectId("6386e3430346b30ec081c93c") }
{ "_id" : ObjectId("6386e3430346b30ec081c93d") }

年龄 zhangsan  并且age《99
> db.user.find({"name":"zhangsan", "age": { "$lt":99 } })
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "name" : "zhangsan", "age" : 88 }
> 
    多个条件的或者 
> db.user.find({ "$or":[{"name":"zhangsan"},{ "age":{  "$gt":56 } }] })
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "name" : "zhangsan", "age" : 88 }
{ "_id" : ObjectId("6386e2d30346b30ec081c939"), "name" : "hehe", "age" : 99 }
> 


 db.user.find(  { "name":{ "$type":"string" } })   按照熟悉的类型查询的
 
 

> db.user.find({ "name":/^zh/ })             正则表达式 查询的
{ "_id" : ObjectId("6386e2b30346b30ec081c938"), "name" : "zhangsan", "age" : 88 }
> 


跳过 多少行 查询 
> db.user.find().limit(1).skip(1)




、、 主键存在 则 修改  ，不存在的则新增
> db.user.save({  "_id" : ObjectId("6386e2b30346b30ec081c938") , "name":"sansan" })


、覆盖方式修改      -----------------、 覆盖匹配后的第一条数据  只要name的查到了，后面的字段全部覆盖，单仅仅限一条
> db.user.update({name:"one"},{ name:"tow" ,pwd:111 })
  修改             --------------------
> db.user.update({ "name":"two" },{ "$set":{ name:"ttt"} })


$inc   数字字段的+- 操作
$push  数组字段增加数据
$addToSet  数组中存在则不加，没有则加入   大小写敏感的

db.user.update({},{ $rename:{"name":"name2"} }) 修改字段的名字

db.user.update({},{ $pop:{} })
db.user.update({},{ $pullAll:{} })

db.user.update({},{ $pull:{} }) 删除数据中对于的数据 只要值相同的全部删除，有几个删几个

、、删除某个字段呢                           pwd这个字段干掉它
> db.user.update({name:"ttt"},{ "$unset":{ pwd:1} });


                        默认false   false 
db.user.update({},{}, 3 upsert , 4 multiple )             3:没找到是否新增    4：当条件匹配成功是否 全操作  默认处理第一条的

db.user.remove({age:{$gt:22}} ，false )  删除  可以多个

db.user.remove({age:{$gt:22}} ，true )  删除 限制一个

db.user.deleteOne({age:{$gt:22}})

db.user.deleteMany({age:{$gt:22}})


//  分组操作  $sum    $max  $min  $avg
> db.user.aggregate([{ $group:{ _id:null, count:{ $sum:1 } }   }])

$Project  
$concat 字符串拼接
$toUpper
$toLower
$substr
$dateToString
数学运算的 +-*、/
$add [2 3]
$subtract [age ,1 ]
$multiply [$age ,2 ]
$divide [$age , 2]
$mod    [ $age ,10 ]


不分组，统计 age大于 55的有多少
> db.user.aggregate([{ $match:{age:{$gt:55}}},{ $group:{ _id:null, count:{ $sum:1 } }   }])
{ "_id" : null, "count" : 1 }



***********************************************************索引*************************************************************************






